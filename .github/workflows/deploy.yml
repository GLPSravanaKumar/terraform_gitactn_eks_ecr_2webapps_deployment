name: Deploy Webapp on EKS

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform apply or destroy'
        required: true
        default: "apply"
        
env:
  AWS_REGION: ap-south-1
  ECR_REPO1: glps-webpp1-repo
  ECR_REPO2: glps-webpp2-repo
  CLUSTER_NAME: glps-demo-eks-cluster

jobs:  
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Required Tools
        uses: azure/setup-helm@v3
        with:
          version: 'v3.14.0'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Build & Push Docker Images
        run: |
          chmod +x ./scripts/build_push_images.sh
          ./scripts/build_push_images.sh
          
      - name: Set image URLs
        run: |
          echo "WEB_IMAGE1=${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO1}:latest" >> $GITHUB_ENV
          echo "WEB_IMAGE2=${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO2}:latest" >> $GITHUB_ENV
      
      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=glps-dev-backend-bucket" \
            -backend-config="region=ap-south-1" \
            -backend-config="key=eks/terraform.tfstate"
          
      - name: Terraform Validate & Plan
        working-directory: ./terraform
        run: |
          terraform validate
          terraform plan -var="web_image1=${WEB_IMAGE1}" -var="web_image2=${WEB_IMAGE2}"

      - name: Apply/Destroy Infrastructure
        working-directory: ./terraform
        run: |
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve -var="web_image1=${WEB_IMAGE1}" -var="web_image2=${WEB_IMAGE2}"
          else
            # Apply base infrastructure first
            terraform apply -auto-approve -var="web_image1=${WEB_IMAGE1}" -var="web_image2=${WEB_IMAGE2}"
            
            # Wait for cluster to become active
            aws eks wait cluster-active \
              --name ${CLUSTER_NAME} \
              --region ${AWS_REGION}
            
            # Apply remaining resources
            terraform apply -auto-approve -var="web_image1=${WEB_IMAGE1}" -var="web_image2=${WEB_IMAGE2}"
          fi

      - name: Configure Kubernetes Access
        run: |
          aws eks update-kubeconfig \
            --name ${CLUSTER_NAME} \
            --region ${AWS_REGION}
          
          # Verify cluster access
          kubectl cluster-info
          kubectl get nodes

      - name: Verify ALB Controller
        run: |
          kubectl wait deployment \
            -n kube-system aws-load-balancer-controller \
            --for condition=Available=True \
            --timeout=300s